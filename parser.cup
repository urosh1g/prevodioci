import java_cup.runtime.*;
import java.io.*;

parser code {:

  public static int errorCount = 0;

  public static void main(String[] args) {
    try {
      FileReader source = new FileReader(args[0]);
      Scanner lexer = new Lexer(source);
      Parser parser = new Parser(lexer);
      parser.parse();
      System.out.println(String.format("Finished with %d errors\n", errorCount));
    }
    catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  public void syntax_error(String error) {
    errorCount++;
    report_error(error, null);
  }

  public void report_error(String error, Object info) {
    System.out.println(String.format("ERROR: %s\n", error));
  }

:}

terminal LBRACE, RBRACE, COMMA, COLON, ID;
terminal CONST, DECIMALCONST, HEXCONST, FLOATCONST, STRCONST;

non terminal Object, Members, Pair;


Object ::= LBRACE Members RBRACE
         | error RBRACE {: syntax_error("missing {"); :}
         ;

Members ::= Pair               
          | Members COMMA Pair 
          | error COMMA Pair {: syntax_error("missing `,` between members"); :}
          ;

Pair ::= ID: id COLON DECIMALCONST: c  {: System.out.println(String.format("found %s : %s", id.toString(), c.toString())); :}
       | ID: id COLON FLOATCONST: c  {: System.out.println(String.format("found %s : %s", id.toString(), c.toString())); :}
       | ID: id COLON HEXCONST: c  {: System.out.println(String.format("found %s : %s", id.toString(), c.toString())); :}
       | ID: id COLON STRCONST: c  {: System.out.println(String.format("found %s : %s", id.toString(), c.toString())); :}
       | ID: id COLON Object: o {: System.out.println(String.format("found %s: object", id.toString())); :}
       | ID: id COLON ID: id1     {: System.out.println(String.format("found %s: %s", id.toString(), id1.toString())); :}
       | error COLON DECIMALCONST     {: syntax_error("missing ID before :"); :}
       ;
