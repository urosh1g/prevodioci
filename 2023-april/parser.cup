import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

parser code {:
  public SymbolTable symTable;
  public static void main(String[] args) {
    try {
      FileReader source = new FileReader(args[0]);
      Scanner lexer = new Lexer(source);
      Parser parser = new Parser(lexer);
      parser.parse();
    }
    catch(Exception ex) {
        ex.printStackTrace();
    }
  }
  public void syntax_error(String message) {
    report_error(message, null);
  }
  public void report_error(String message, Object info) {
    System.err.println(String.format("ERROR: %s\n", message));
  }
:}

init with {: symTable = new SymbolTable(); :}

terminal ID, LBRACK, RBRACK, COMMA, COLON;
terminal STRCONST, INTCONST, HEXCONST, FLOATCONST;

non terminal SliceOperation, Indices, Range;
non terminal ArrayList<Constant> List;

SliceOperation ::= ID LBRACK Indices RBRACK
                  | error LBRACK Indices RBRACK {: syntax_error("Missing slice identifier"); :}
                  | ID error Indices RBRACK {: syntax_error("Missing open bracket"); :}
                  ;

Indices        ::=  List
                  | Range
                  ;

List           ::=  List: list COMMA STRCONST: c {: 
                    Type type = symTable.getType("string");
                    Type listType = list.get(0).type;
                    RESULT = null;
                    if(type != listType) {
                      report_error("Elements of list need to be the same type!", null);
                      return null;
                    }
                    for(Constant constant: list) {
                      if(constant.value.toString().equals(c.toString())) {
                        report_error("Elements of list need to be unique!", null);
                        return null;
                      }
                    }
                    list.add(new Constant(type, c.toString()));
                    RESULT = list;
                  :}
                  | List error INTCONST {: syntax_error("Missing comma between list indices"); :}
                  | List: list COMMA INTCONST: c {: 
                    Type type = symTable.getType("int");
                    Type listType = list.get(0).type;
                    if(type != listType) {
                      RESULT = null;
                      report_error("Elements of list need to be the same type!", null);
                      return null;
                    }
                    for(Constant constant: list) {
                      if(constant.value.toString().equals(c.toString())) {
                        report_error("Elements of list need to be unique!", null);
                        return null;
                      }
                    }
                    list.add(new Constant(type, c.toString()));
                    RESULT = list;
                  :}
                  | STRCONST: c {: 
                    Type type = symTable.getType("string");
                    Constant constant = new Constant(type, c.toString());
                    ArrayList<Constant> list = new ArrayList();
                    list.add(constant);
                    RESULT = list;
                  :}
                  | INTCONST: c {: 
                    Type type = symTable.getType("int");
                    Constant constant = new Constant(type, c.toString());
                    ArrayList<Constant> list = new ArrayList();
                    list.add(constant);
                    RESULT = list;
                  :}
                  |
                  ;

Range          ::=  COLON INTCONST: c1 COLON INTCONST: c2 {: 
                    Integer first = new Integer(c1.toString());
                    Integer second = new Integer(c2.toString());
                    if(first.intValue() > second.intValue()) {
                      report_error("Invalid range!", null);
                    }
                  :}
                  | COLON INTCONST COLON
                  | COLON INTCONST error {: syntax_error("Missing COLON inside range"); :}
                  ;
